{"ast":null,"code":"import { UPDATE_PRODUCTS, UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY, ADD_TO_CART, ADD_MULTIPLE_TO_CART, REMOVE_FROM_CART, UPDATE_CART_QUANTITY, CLEAR_CART, TOGGLE_CART } from \"./actions\";\nimport { useReducer } from 'react';\nexport const reducer = (state, action) => {\n  switch (action.type) {\n    // if action type value is the value of `UPDATE_PRODUCTS`, return a new state object with an updated products array\n    case UPDATE_PRODUCTS:\n      return {\n        ...state,\n        products: [...action.products]\n      };\n\n    // if action type value is the value of `UPDATE_CATEGORIES`, return a new state object with an updated categories array\n    case UPDATE_CATEGORIES:\n      return {\n        ...state,\n        categories: [...action.categories]\n      };\n    case UPDATE_CURRENT_CATEGORY:\n      return {\n        ...state,\n        currentCategory: action.currentCategory\n      };\n    case ADD_TO_CART:\n      return {\n        ...state,\n        cartOpen: true,\n        cart: [...state.cart, action.product]\n      };\n    case ADD_MULTIPLE_TO_CART:\n      return {\n        ...state,\n        cart: [...state.cart, ...action.products]\n      };\n    case REMOVE_FROM_CART:\n      let newState = state.cart.filter(product => {\n        return product._id !== action._id;\n      });\n      return {\n        ...state,\n        cartOpen: newState.length > 0,\n        cart: newState\n      };\n    case UPDATE_CART_QUANTITY:\n      return {\n        ...state,\n        cartOpen: true,\n        cart: state.cart.map(product => {\n          if (action._id === product._id) {\n            product.purchaseQuantity = action.purchaseQuantity;\n          }\n          return product;\n        })\n      };\n    case CLEAR_CART:\n      return {\n        ...state,\n        cartOpen: false,\n        cart: []\n      };\n    case TOGGLE_CART:\n      return {\n        ...state,\n        cartOpen: !state.cartOpen\n      };\n    // if it's none of these actions, do not update state at all and keep things the same!\n    default:\n      return state;\n  }\n};\nexport function useProductReducer(initialState) {\n  return useReducer(reducer, initialState);\n}\n;","map":{"version":3,"names":["UPDATE_PRODUCTS","UPDATE_CATEGORIES","UPDATE_CURRENT_CATEGORY","ADD_TO_CART","ADD_MULTIPLE_TO_CART","REMOVE_FROM_CART","UPDATE_CART_QUANTITY","CLEAR_CART","TOGGLE_CART","useReducer","reducer","state","action","type","products","categories","currentCategory","cartOpen","cart","product","newState","filter","_id","length","map","purchaseQuantity","useProductReducer","initialState"],"sources":["C:/Users/tdegi/OneDrive/Desktop/Bootcamp/Repository/fifth-street/client/src/utils/reducers.js"],"sourcesContent":["import {\r\n    UPDATE_PRODUCTS,\r\n    UPDATE_CATEGORIES,\r\n    UPDATE_CURRENT_CATEGORY,\r\n    ADD_TO_CART,\r\n    ADD_MULTIPLE_TO_CART,\r\n    REMOVE_FROM_CART,\r\n    UPDATE_CART_QUANTITY,\r\n    CLEAR_CART,\r\n    TOGGLE_CART\r\n  } from \"./actions\";\r\nimport { useReducer } from 'react';\r\n\r\nexport const reducer = (state, action) => {\r\n    switch (action.type) {\r\n        // if action type value is the value of `UPDATE_PRODUCTS`, return a new state object with an updated products array\r\n        case UPDATE_PRODUCTS:\r\n            return {\r\n                ...state,\r\n                products: [...action.products]\r\n            };\r\n        \r\n        // if action type value is the value of `UPDATE_CATEGORIES`, return a new state object with an updated categories array\r\n        case UPDATE_CATEGORIES:\r\n            return {\r\n                ...state,\r\n                categories: [...action.categories]\r\n            };\r\n\r\n        case UPDATE_CURRENT_CATEGORY:\r\n            return {\r\n                ...state,\r\n                currentCategory: action.currentCategory\r\n            };\r\n\r\n        case ADD_TO_CART:\r\n            return {\r\n                ...state,\r\n                cartOpen: true,\r\n                cart: [...state.cart, action.product]\r\n            };\r\n        \r\n        case ADD_MULTIPLE_TO_CART:\r\n            return {\r\n                ...state,\r\n                cart: [...state.cart, ...action.products],\r\n            };\r\n\r\n        case REMOVE_FROM_CART:\r\n            let newState = state.cart.filter(product => {\r\n                return product._id !== action._id;\r\n            });\r\n\r\n            return {\r\n                ...state,\r\n                cartOpen: newState.length >0,\r\n                cart: newState                \r\n            };\r\n\r\n        case UPDATE_CART_QUANTITY:\r\n            return {\r\n                ...state,\r\n                cartOpen: true,\r\n                cart: state.cart.map(product => {\r\n                    if (action._id === product._id) {\r\n                        product.purchaseQuantity = action.purchaseQuantity;\r\n                    }\r\n                    return product;\r\n                })\r\n            };\r\n\r\n        case CLEAR_CART:\r\n            return {\r\n                ...state,\r\n                cartOpen: false,\r\n                cart: []\r\n            };\r\n\r\n        case TOGGLE_CART:\r\n            return {\r\n                ...state,\r\n                cartOpen: !state.cartOpen\r\n            };\r\n        // if it's none of these actions, do not update state at all and keep things the same!\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport function useProductReducer(initialState) {\r\n    return useReducer(reducer, initialState);\r\n};"],"mappings":"AAAA,SACIA,eAAe,EACfC,iBAAiB,EACjBC,uBAAuB,EACvBC,WAAW,EACXC,oBAAoB,EACpBC,gBAAgB,EAChBC,oBAAoB,EACpBC,UAAU,EACVC,WAAW,QACN,WAAW;AACpB,SAASC,UAAU,QAAQ,OAAO;AAElC,OAAO,MAAMC,OAAO,GAAG,CAACC,KAAK,EAAEC,MAAM,KAAK;EACtC,QAAQA,MAAM,CAACC,IAAI;IACf;IACA,KAAKb,eAAe;MAChB,OAAO;QACH,GAAGW,KAAK;QACRG,QAAQ,EAAE,CAAC,GAAGF,MAAM,CAACE,QAAQ;MACjC,CAAC;;IAEL;IACA,KAAKb,iBAAiB;MAClB,OAAO;QACH,GAAGU,KAAK;QACRI,UAAU,EAAE,CAAC,GAAGH,MAAM,CAACG,UAAU;MACrC,CAAC;IAEL,KAAKb,uBAAuB;MACxB,OAAO;QACH,GAAGS,KAAK;QACRK,eAAe,EAAEJ,MAAM,CAACI;MAC5B,CAAC;IAEL,KAAKb,WAAW;MACZ,OAAO;QACH,GAAGQ,KAAK;QACRM,QAAQ,EAAE,IAAI;QACdC,IAAI,EAAE,CAAC,GAAGP,KAAK,CAACO,IAAI,EAAEN,MAAM,CAACO,OAAO;MACxC,CAAC;IAEL,KAAKf,oBAAoB;MACrB,OAAO;QACH,GAAGO,KAAK;QACRO,IAAI,EAAE,CAAC,GAAGP,KAAK,CAACO,IAAI,EAAE,GAAGN,MAAM,CAACE,QAAQ;MAC5C,CAAC;IAEL,KAAKT,gBAAgB;MACjB,IAAIe,QAAQ,GAAGT,KAAK,CAACO,IAAI,CAACG,MAAM,CAACF,OAAO,IAAI;QACxC,OAAOA,OAAO,CAACG,GAAG,KAAKV,MAAM,CAACU,GAAG;MACrC,CAAC,CAAC;MAEF,OAAO;QACH,GAAGX,KAAK;QACRM,QAAQ,EAAEG,QAAQ,CAACG,MAAM,GAAE,CAAC;QAC5BL,IAAI,EAAEE;MACV,CAAC;IAEL,KAAKd,oBAAoB;MACrB,OAAO;QACH,GAAGK,KAAK;QACRM,QAAQ,EAAE,IAAI;QACdC,IAAI,EAAEP,KAAK,CAACO,IAAI,CAACM,GAAG,CAACL,OAAO,IAAI;UAC5B,IAAIP,MAAM,CAACU,GAAG,KAAKH,OAAO,CAACG,GAAG,EAAE;YAC5BH,OAAO,CAACM,gBAAgB,GAAGb,MAAM,CAACa,gBAAgB;UACtD;UACA,OAAON,OAAO;QAClB,CAAC;MACL,CAAC;IAEL,KAAKZ,UAAU;MACX,OAAO;QACH,GAAGI,KAAK;QACRM,QAAQ,EAAE,KAAK;QACfC,IAAI,EAAE;MACV,CAAC;IAEL,KAAKV,WAAW;MACZ,OAAO;QACH,GAAGG,KAAK;QACRM,QAAQ,EAAE,CAACN,KAAK,CAACM;MACrB,CAAC;IACL;IACA;MACI,OAAON,KAAK;EAAC;AAEzB,CAAC;AAED,OAAO,SAASe,iBAAiB,CAACC,YAAY,EAAE;EAC5C,OAAOlB,UAAU,CAACC,OAAO,EAAEiB,YAAY,CAAC;AAC5C;AAAC"},"metadata":{},"sourceType":"module"}