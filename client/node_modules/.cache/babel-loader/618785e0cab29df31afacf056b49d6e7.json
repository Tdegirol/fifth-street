{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tdegi\\\\OneDrive\\\\Desktop\\\\Bootcamp\\\\Repository\\\\fifth-street\\\\client\\\\src\\\\components\\\\Sort\\\\index.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Container, Image, Dropdown } from \"react-bootstrap\";\nimport { UPDATE_PRODUCTS } from '../../utils/actions.js';\nimport { QUERY_PRODUCTS } from '../../utils/queries.js';\nimport { useQuery } from '@apollo/client';\nimport { useStoreContext } from '../../utils/GlobalState';\nimport { idbPromise } from '../../utils/helpers';\nconst Sort = () => {\n  const [state, dispatch] = useStoreContext();\n  const {\n    loading,\n    data\n  } = useQuery(QUERY_PRODUCTS);\n  const [sortOption, setSortOption] = useState('');\n  useEffect(() => {\n    //if there's data to be stored\n    if (data) {\n      //store it in the global state object\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products\n      });\n      //but also take each product and save it to IndexedDB using the helper function\n      data.products.forEach(product => {\n        idbPromise('products', 'put', product);\n      });\n      //add else if to check if 'loading' is undefined in 'useQuery()' hook\n    } else if (!loading) {\n      //since we're offline, get all of the data from the 'products' store\n      idbPromise('products', 'get').then(products => {\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: products\n        });\n      });\n    }\n  }, [data, loading, dispatch]);\n  const handleSort = e => {\n    setSortOption(e);\n    if (e === 'Name') {\n      let sortedProducts = data.products.slice().sort((a, b) => a.name.localeCompare(b.name));\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: sortedProducts\n      });\n    } else if (e === 'Price Low to High') {\n      let sortedProducts = data.products.slice().sort((a, b) => a.price - b.price);\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: sortedProducts\n      });\n    } else if (e === 'Price High to Low') {\n      let sortedProducts = data.products.slice().sort((a, b) => b.price - a.price);\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: sortedProducts\n      });\n    } else {}\n  };\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Dropdown, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Dropdown.Toggle, {\n    variant: \"light\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 15\n    }\n  }, \"Sort Products:\"), /*#__PURE__*/React.createElement(Dropdown.Menu, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Dropdown.Item, {\n    eventKey: \"Name\",\n    onSelect: handleSort,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 17\n    }\n  }, \"Name |\"), /*#__PURE__*/React.createElement(Dropdown.Item, {\n    eventKey: \"Price Low to High\",\n    onSelect: handleSort,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 17\n    }\n  }, \"| Price Low to High  |\"), /*#__PURE__*/React.createElement(Dropdown.Item, {\n    eventKey: \"Price High to Low\",\n    onSelect: handleSort,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 17\n    }\n  }, \" Price High to Low\")))), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 11\n    }\n  }, sortOption)));\n};\nexport default Sort;","map":{"version":3,"names":["React","useState","useEffect","Container","Image","Dropdown","UPDATE_PRODUCTS","QUERY_PRODUCTS","useQuery","useStoreContext","idbPromise","Sort","state","dispatch","loading","data","sortOption","setSortOption","type","products","forEach","product","then","handleSort","e","sortedProducts","slice","sort","a","b","name","localeCompare","price"],"sources":["C:/Users/tdegi/OneDrive/Desktop/Bootcamp/Repository/fifth-street/client/src/components/Sort/index.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Container,\r\n  Image,\r\n  Dropdown,\r\n} from \"react-bootstrap\";\r\nimport { UPDATE_PRODUCTS } from '../../utils/actions.js';\r\nimport { QUERY_PRODUCTS } from '../../utils/queries.js';\r\nimport { useQuery } from '@apollo/client';\r\nimport { useStoreContext } from '../../utils/GlobalState';\r\nimport { idbPromise } from '../../utils/helpers';\r\n\r\nconst Sort = () => {\r\n    const [state, dispatch] = useStoreContext();\r\n    const { loading, data } = useQuery(QUERY_PRODUCTS);\r\n    const [sortOption, setSortOption] = useState('');\r\n\r\n    useEffect(() => {\r\n        //if there's data to be stored\r\n        if (data) {\r\n          //store it in the global state object\r\n          dispatch({\r\n            type: UPDATE_PRODUCTS,\r\n            products: data.products\r\n          }); \r\n          //but also take each product and save it to IndexedDB using the helper function\r\n          data.products.forEach((product) => {\r\n            idbPromise('products', 'put', product);\r\n          });\r\n          //add else if to check if 'loading' is undefined in 'useQuery()' hook\r\n        } else if (!loading) {\r\n          //since we're offline, get all of the data from the 'products' store\r\n          idbPromise('products', 'get').then((products) => {\r\n            dispatch({\r\n              type: UPDATE_PRODUCTS,\r\n              products: products\r\n            });\r\n          });\r\n        }\r\n    }, [data, loading, dispatch]);\r\n\r\n    const handleSort = (e) => {\r\n      setSortOption(e);\r\n      if (e==='Name') {\r\n        let sortedProducts = data.products.slice().sort((a,b) => a.name.localeCompare(b.name));\r\n        dispatch({\r\n          type: UPDATE_PRODUCTS,\r\n          products: sortedProducts\r\n        });\r\n      } else if (e==='Price Low to High') {\r\n        let sortedProducts = data.products.slice().sort((a, b) => a.price - b.price);\r\n        dispatch({\r\n          type: UPDATE_PRODUCTS,\r\n          products: sortedProducts\r\n        });\r\n      } else if (e==='Price High to Low'){\r\n        let sortedProducts = data.products.slice().sort((a, b) => b.price - a.price);\r\n        dispatch({\r\n          type: UPDATE_PRODUCTS,\r\n          products: sortedProducts\r\n        });\r\n      } else {\r\n      }\r\n    }\r\n\r\n    return (\r\n      <>\r\n        <Container>\r\n          {/* <Image\r\n            src={require(`../../assets/logo.jpg`)}\r\n            fluid\r\n            className='background-image'\r\n          /> */}\r\n          <div>\r\n            <Dropdown>\r\n              <Dropdown.Toggle\r\n                variant=\"light\"\r\n              >\r\n                Sort Products:\r\n              </Dropdown.Toggle>\r\n              <Dropdown.Menu>\r\n                <Dropdown.Item eventKey=\"Name\" onSelect={handleSort}>Name |</Dropdown.Item>\r\n                <Dropdown.Item eventKey=\"Price Low to High\" onSelect={handleSort}>| Price Low to High  |</Dropdown.Item>\r\n                <Dropdown.Item eventKey=\"Price High to Low\" onSelect={handleSort}> Price High to Low</Dropdown.Item>\r\n              </Dropdown.Menu>\r\n            </Dropdown>\r\n          </div>\r\n          <p>{sortOption}</p>\r\n        </Container>\r\n      </>\r\n    );\r\n  };\r\n  \r\nexport default Sort;"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SACEC,SAAS,EACTC,KAAK,EACLC,QAAQ,QACH,iBAAiB;AACxB,SAASC,eAAe,QAAQ,wBAAwB;AACxD,SAASC,cAAc,QAAQ,wBAAwB;AACvD,SAASC,QAAQ,QAAQ,gBAAgB;AACzC,SAASC,eAAe,QAAQ,yBAAyB;AACzD,SAASC,UAAU,QAAQ,qBAAqB;AAEhD,MAAMC,IAAI,GAAG,MAAM;EACf,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGJ,eAAe,EAAE;EAC3C,MAAM;IAAEK,OAAO;IAAEC;EAAK,CAAC,GAAGP,QAAQ,CAACD,cAAc,CAAC;EAClD,MAAM,CAACS,UAAU,EAAEC,aAAa,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EAEhDC,SAAS,CAAC,MAAM;IACZ;IACA,IAAIa,IAAI,EAAE;MACR;MACAF,QAAQ,CAAC;QACPK,IAAI,EAAEZ,eAAe;QACrBa,QAAQ,EAAEJ,IAAI,CAACI;MACjB,CAAC,CAAC;MACF;MACAJ,IAAI,CAACI,QAAQ,CAACC,OAAO,CAAEC,OAAO,IAAK;QACjCX,UAAU,CAAC,UAAU,EAAE,KAAK,EAAEW,OAAO,CAAC;MACxC,CAAC,CAAC;MACF;IACF,CAAC,MAAM,IAAI,CAACP,OAAO,EAAE;MACnB;MACAJ,UAAU,CAAC,UAAU,EAAE,KAAK,CAAC,CAACY,IAAI,CAAEH,QAAQ,IAAK;QAC/CN,QAAQ,CAAC;UACPK,IAAI,EAAEZ,eAAe;UACrBa,QAAQ,EAAEA;QACZ,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ;EACJ,CAAC,EAAE,CAACJ,IAAI,EAAED,OAAO,EAAED,QAAQ,CAAC,CAAC;EAE7B,MAAMU,UAAU,GAAIC,CAAC,IAAK;IACxBP,aAAa,CAACO,CAAC,CAAC;IAChB,IAAIA,CAAC,KAAG,MAAM,EAAE;MACd,IAAIC,cAAc,GAAGV,IAAI,CAACI,QAAQ,CAACO,KAAK,EAAE,CAACC,IAAI,CAAC,CAACC,CAAC,EAACC,CAAC,KAAKD,CAAC,CAACE,IAAI,CAACC,aAAa,CAACF,CAAC,CAACC,IAAI,CAAC,CAAC;MACtFjB,QAAQ,CAAC;QACPK,IAAI,EAAEZ,eAAe;QACrBa,QAAQ,EAAEM;MACZ,CAAC,CAAC;IACJ,CAAC,MAAM,IAAID,CAAC,KAAG,mBAAmB,EAAE;MAClC,IAAIC,cAAc,GAAGV,IAAI,CAACI,QAAQ,CAACO,KAAK,EAAE,CAACC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACI,KAAK,GAAGH,CAAC,CAACG,KAAK,CAAC;MAC5EnB,QAAQ,CAAC;QACPK,IAAI,EAAEZ,eAAe;QACrBa,QAAQ,EAAEM;MACZ,CAAC,CAAC;IACJ,CAAC,MAAM,IAAID,CAAC,KAAG,mBAAmB,EAAC;MACjC,IAAIC,cAAc,GAAGV,IAAI,CAACI,QAAQ,CAACO,KAAK,EAAE,CAACC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAACG,KAAK,GAAGJ,CAAC,CAACI,KAAK,CAAC;MAC5EnB,QAAQ,CAAC;QACPK,IAAI,EAAEZ,eAAe;QACrBa,QAAQ,EAAEM;MACZ,CAAC,CAAC;IACJ,CAAC,MAAM,CACP;EACF,CAAC;EAED,oBACE;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBACE,oBAAC,SAAS;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBAMR;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBACE,oBAAC,QAAQ;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBACP,oBAAC,QAAQ,CAAC,MAAM;IACd,OAAO,EAAC,OAAO;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAChB,gBAED,CAAkB,eAClB,oBAAC,QAAQ,CAAC,IAAI;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBACZ,oBAAC,QAAQ,CAAC,IAAI;IAAC,QAAQ,EAAC,MAAM;IAAC,QAAQ,EAAEF,UAAW;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAAC,QAAM,CAAgB,eAC3E,oBAAC,QAAQ,CAAC,IAAI;IAAC,QAAQ,EAAC,mBAAmB;IAAC,QAAQ,EAAEA,UAAW;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAAC,wBAAsB,CAAgB,eACxG,oBAAC,QAAQ,CAAC,IAAI;IAAC,QAAQ,EAAC,mBAAmB;IAAC,QAAQ,EAAEA,UAAW;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAAC,oBAAkB,CAAgB,CACtF,CACP,CACP,eACN;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAAIP,UAAU,CAAK,CACT,CACX;AAEP,CAAC;AAEH,eAAeL,IAAI"},"metadata":{},"sourceType":"module"}